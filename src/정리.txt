

 * 스프링 데이터 jpa는 JPQL을 직접 실행한다. JPQL이 직접 실행되면 항상 SQL이 실행된다 (findById 제외)
 * findById의 경우는 스프링 데이터 JPA가 영속성 컨텍스트에서 엔티티를 조회하는 em.find()를 실행한다.

 정리
 em.find() vs JPQL
 em.find() -> 영속성 컨텍스트를 먼저 조회하고 없으면 SQL을 실행
 JPQL -> SQL을 먼저 실행

 모든 연관관계는 지연로딩으로 설정한다.(중요)


 Eager type이 유용한 경우
   em.find() 한건의 데이터를 조회할때 id로 조회할 때 => Eager type을 join 해서 같이 가져온다 // id로 한건 조회할 때 유용

 하지만 jpql을 사용하는 경우에는 처음에 연관관계 상관 없이 sql문이 실행된다.
 그 이후 연관관계의 type을 보기 때문에 type이 eager로 되어 있으면 eager type의 연관관계를 가져오기 위해 n+1 문제가 생긴다

 @xToOne(OneToOne, ManyToOne) 관계는 기본이 즉시 로딩이므로 직접 지연로딩으로 설정할 것

 컬렉션은 필드에서 초기화 하자. 컬렉션은 필드에서 바로 초기화 하는 것이 안전하다.
    null 문제에서 안전하다.
    하이버네이트는 엔티티를 영속화 할 때, 컬랙션을 감싸서 하이버네이트가 제공하는 내장 컬렉션으로 변경한다.
    만약 getOrders() 처럼 임의의 메서드에서 컬력션을 잘못 생성하면 하이버네이트 내부 메커니즘에 문제가 발생할 수 있다.
    따라서 필드레벨에서 생성하는 것이 가장 안전하고, 코드도 간결하다
    하이버네이트가 컬렉션을 추적하기 위해 내장 클래스로 바꾸었는데 set으로 컬렉션 변경시 추적이 안된다. // 컬렉션을 바꾸면 안됨

 cascade 미사용시
    order 엔티티에서 List<OrderItem> orderItems에 저장할 때
    // 각각 persist 해야한다
    persist(orderItemA)
    persist(orderItemB)
    persist(orderItemC)
    // 각각 저장 데이터 persist한 다음 order에 데이터를 넣고 persist 해야한다
    persist(order)

 cascade 사용시
    persist(order) 만 하면 된다. persist를 전파한다

 cascade는 A를 영속화 할 때 B도 함께 영속화 할지에 대한 내용이다. mappedBy는 관계 없음
    단순하게 A -> B 관계가 cascade로 되어 있으면 A엔티티를 PERSIST할 때 B 엔티티도 연쇄해서 함께 PERSIST 한다.

  cascade의 범위
    // 라이프 사이클을 동일하게 관리한다.
    참조하는 대상이 자기 자신 밖에 없을 때 사용하는 것이 좋음
    ex) Order -> delivery 참조 (delivery는 Order만 참조한다) cascade o
        Order -> orderItem 참조 (orderItem Order만 참조한다) cascade o


 더티 체킹
   Transaction 안에서 엔티티의 변경이 일어나면, 변경 내용을 자동으로 데이터베이스에 반영하는 JPA 특징입니다.
   데이터베이스에 변경 데이터를 저장하는 시점 :
    1) Transaction commit 시점
    2) EntityManager flush 시점
    3) JPQL 사용 시점
   또한, 영속성 컨택스트(Persistence Context) 안에 있는 엔티티를 대상으로 더티 체킹이 일어난다

 트랜잭션 commit 순간 EntityManger flush 하다

 spring transactional 은 기본 전략 test 케이스에서 rollback  => 따라서 test에서는 영속성 context flush 안함

 단순히 order를 orderRepository로 조회를 하게 되면 order와 연관된 모든 엔티티들이 영속상태가 된다.

 JPA에서 동적쿼리를 어떻게 해결해야 하는 가?
    값이 있을 수도 없을 수도 있다 => 동적 쿼리
    querydsl 사용 하는 것이 좋음, criteria 라는 jpa 표준 스펙이 있지만 쿼리문이 쉽게 떠올르지 않아 유지보수가 어렵다.

 준영속 엔티티를 수정하는 2가지 방법 - 변경 감지를 사용해야 한다
    변경 감지 기능 사용
        // detach 상태 persist 상태로 변경 방법
        @Transactional
        public void updateItem(Long itemId, Book bookParam){
            // 영속상태
            Item findItem = itemRepository.findOne(itemId);
            findItem.setPrice(bookParam.getPrice());
        }
    병합 사용

        @Transactional
        public void updateItem(Book bookParam){
            // 영속상태 // findItem(결과)는 영속 상태 but bookParam은 영속상태가 안된다
            Item findItem = em.merge(bookParam);
        }

        1. merge() 를 실행한다.
        2. 파라미터로 넘어온 준영속 엔티티의 식별자 값으로 1차 캐시에서 엔티티를 조회한다.
        2-1. 만약 1차 캐시에 엔티티가 없으면 데이터베이스에서 엔티티를 조회하고, 1차 캐시에 저장한다.
        3. 조회한 영속 엔티티( mergeMember )에 member 엔티티의 값을 채워 넣는다. (member 엔티티의 모든 값
        을 mergeMember에 밀어 넣는다. 이때 mergeMember의 “회원1”이라는 이름이 “회원명변경”으로 바
        뀐다.)
        4. 영속 상태인 mergeMember를 반환한다

         주의: 변경 감지 기능을 사용하면 원하는 속성만 선택해서 변경할 수 있지만, 병합을 사용하면 모든 속성이
        변경된다. 병합시 값이 없으면 null 로 업데이트 할 위험도 있다. (병합은 모든 필드를 교체한다.)

 패키지 api와 view 쓰는 controller 분리
    그 이유 공통으로 예외 처리할 때 패키지나 공통단위로 처리한다

 엔티티는 자주 바뀐수 있다 따라서 엔티티가 api의 스펙이 되서는 안된다. 따라서 api의 스펙에 맞춰서 dto를 만드는 것이 좋다

 @Vaild 사용시 검증
 spring mvc에서 컨트롤러 단에서 validation 기능 제공
 spring data에서 flush 될때 validation 기능 제공
 @Validated로 유효성 검사 가능

 지연 로딩과 조회 성능 최적화
    V3는 fetch join으로 데이터 다 가져오기 때문에 네트워크 비용이 늘어난다
    v4는 일일히 쿼리문을 작성했으므로 원하는 데이터만 가져오지만 재사용성이 줄어든다 또한 dto를 조회했기 때문에 데이터 변경을 할 여지가 없다


 쿼리 방식 선택 권장 순서
    1. 우선 엔티티를 DTO로 변환하는 방법을 선택한다.
    2. 필요하면 페치 조인으로 성능을 최적화 한다. 대부분의 성능 이슈가 해결된다.
    3. 그래도 안되면 DTO로 직접 조회하는 방법을 사용한다.
    4. 최후의 방법은 JPA가 제공하는 네이티브 SQL이나 스프링 JDBC Template을 사용해서 SQL을 직접사용한다.

 jpa가 데이터베이스 커넥션 획득 시점 : 데이터베이스 트랜잭션 시작할 때, 데이터베이스 커넥션 가져온다

 jpa 데이터베이스 커넥션 반환 시점
    osiv (open session in view) true 일 때 : view일 경우 렌더링 까지 유지, rest 일 경우 컨트롤러에서 반환 까지 커넥션 유지한다. 즉 response 반환 까지 살아 있음
                                            오랫동안 데이터 커넥션 리소스를 사용하기 때문에 커넥션이 모자랄 수 있다
    osiv false : 데이터 커넥션을 빨리 봔환하기에 효율적이다 다만 트랜잭션이 종료되면 영속성 컨텍스트가 없어지기 때문에 transaction 밖에서 lazy 로딩 못한다,